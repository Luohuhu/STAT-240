knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(scales)
library(lubridate)
library(XML) #For reading in HTML files
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("../../scripts/viridis.R")
## Input:  x = HTML file
## Output: nicely formatted tibble
read_airport =  function(x)
{
airport_column_names = c("airport",
"terminal",
"date",
"hour",
"us_avg_wait",
"us_max_wait",
"non_us_avg_wait",
"non_us_max_wait",
"all_avg_wait",
"all_max_wait",
"all_n_0_15",
"all_n_16_30",
"all_n_31_45",
"all_n_46_60",
"all_n_61_90",
"all_n_91_120",
"all_n_120_plus",
"all_excluded",
"all_total",
"all_flights",
"all_booths")
airport = readHTMLTable(x)$`NULL` %>%
slice(-(1:3))
names(airport) = airport_column_names
airport = airport %>%
as_tibble() %>%
mutate(across(ends_with("wait") | starts_with("all"), as.numeric)) %>%
mutate(across(where(is.factor),as.character)) %>%
mutate(date = mdy(date))
return( airport )
}
?reorder
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(scales)
library(lubridate)
library(XML) #For reading in HTML files
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("../../scripts/viridis.R")
## Input:  x = HTML file
## Output: nicely formatted tibble
read_airport =  function(x)
{
airport_column_names = c("airport",
"terminal",
"date",
"hour",
"us_avg_wait",
"us_max_wait",
"non_us_avg_wait",
"non_us_max_wait",
"all_avg_wait",
"all_max_wait",
"all_n_0_15",
"all_n_16_30",
"all_n_31_45",
"all_n_46_60",
"all_n_61_90",
"all_n_91_120",
"all_n_120_plus",
"all_excluded",
"all_total",
"all_flights",
"all_booths")
airport = readHTMLTable(x)$`NULL` %>%
slice(-(1:3))
names(airport) = airport_column_names
airport = airport %>%
as_tibble() %>%
mutate(across(ends_with("wait") | starts_with("all"), as.numeric)) %>%
mutate(across(where(is.factor),as.character)) %>%
mutate(date = mdy(date))
return( airport )
}
## read the individual data sets
den = read_airport("../../data/DEN-2018.html")
jfk = read_airport("../../data/JFK-2018.html")
lax = read_airport("../../data/LAX-2018.html")
msp = read_airport("../../data/MSP-2018.html")
ord = read_airport("../../data/ORD-2018.html")
sfo = read_airport("../../data/SFO-2018.html")
## combine into one data set
awt = bind_rows(den, jfk, lax, msp, ord, sfo)
## remove the individual ones
rm(den, jfk, lax, msp, ord, sfo)
ggplot(awt, aes(x=airport, y=all_avg_wait, color=airport)) +
geom_boxplot()
awt %>%
mutate(airport = reorder(airport,-all_avg_wait, FUN=median)) %>%
#`airport` as factor with levels ordered according to -all_avg_wait and FUN value
# reorder actually change the order but arrange only change it in the surface, although arrange prints out in order, but deep down it is still unchanged.
ggplot(aes(x=airport, y=all_avg_wait, color=airport)) +
geom_boxplot() +
ggtitle("Are some airports more efficient that than others in terms of average wait time?")
awt %>%
group_by(airport, hour) %>%
summarize(total = sum(all_total),
booth_total = sum(all_booths)) %>%
mutate(per_booth = round(total/booth_total,2)) %>%
select(-total, -booth_total) %>%
ggplot(aes(hour, per_booth, color=airport)) +
geom_point() +
geom_hline(yintercept=45, linetype="dashed",color="red") +
facet_wrap(~airport) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ylab("Passengers per booth") +
ggtitle("Are some airports more efficient",
subtitle = "in the number of people served by hour per available booth?")
awt %>%
mutate(rate = all_total / all_booths) %>%
group_by(airport, hour) %>%
summarize(rate_mean = mean(rate),
rate_median = median(rate)) %>%
ggplot(aes(x = hour, y = rate_median, color=airport)) +
geom_point() +
geom_hline(yintercept = 45,
linetype = "dashed", color = "red") +
facet_wrap(~ airport) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ylab("Passengers per booth") +
ggtitle("Are some airports more efficient",
subtitle = "in the number of people served by hour per available booth?")
awt = awt %>%
mutate(month = month(date, label = TRUE),
wday = wday(date, label = TRUE)) %>%
select(airport, terminal, date, month, everything())
awt %>%
group_by(month) %>%
summarize(total = sum(all_total)) %>%
arrange(desc(total))
# different days in each month, so it is not very fair
busy_months = awt %>%
mutate(day = day(date)) %>%
group_by(month, day) %>%
summarize(total = sum(all_total)) %>%
group_by(month) %>%
summarize(n = n(), total = sum(total), daily = total/n) %>%
arrange(desc(daily))
ggplot(busy_months, aes(x=month, y=daily)) +
geom_col(fill = "blue", color = "black") +
scale_y_continuous(labels = comma) +
xlab("") +
ylab("# Arrivals") +
ggtitle("Daily International Arrival Totals", subtitle = "at six selected US Airports")
