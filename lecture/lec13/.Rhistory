knitr::opts_chunk$set(echo = TRUE, message=FALSE)
library(tidyverse)
library(scales)
library(readxl)
source("../../scripts/viridis.R")
male_05_17 =  read_excel(
"../../data/Obesity+Prevalence+by+ZIP+Code+and+Age+Group,+Males.xlsx",
sheet=3, skip=5, na=".")
str(male_05_17)
knitr::opts_chunk$set(echo = TRUE, message=FALSE)
library(tidyverse)
library(scales)
library(readxl)
source("../../scripts/viridis.R")
male_05_17 =  read_excel(
"../../data/Obesity+Prevalence+by+ZIP+Code+and+Age+Group,+Males.xlsx",
sheet=3, skip=5, na=".")
## na="." -> what to recognize as a missing value
str(male_05_17)
head(male_05_17)
male_05_17 = male_05_17 %>%
select(starts_with("ZIP"),
starts_with("Number"),
starts_with("Population")) %>%
rename(zip = starts_with("ZIP"),
obese = ends_with("Obesity"),
n = ends_with("BMI"),
pop = starts_with("Population")) %>%
mutate(sex = "male") %>%
mutate(age = "5-17")
head(male_05_17)
rm(male_05_17)
## file is a string with filename
## sex_string is either "female" or "male"
## i is a number from 1 to 5
## using for loop function
read_and_format = function(file, sex_string, i)
{
age_values = c("05-17","18-34","35-54","55-74","75+")
temp = read_excel(file, sheet=i+2, skip=5, na=".") %>%
select(starts_with("ZIP"),
starts_with("Number"),
starts_with("Population")) %>%
rename(zip = starts_with("ZIP"),
obese = ends_with("Obesity"),
n = ends_with("BMI"),
pop = starts_with("Population")) %>%
mutate(sex = sex_string) %>%
mutate(age = age_values[i])
return( temp )
}
## test the function
male_05_17 = read_and_format("../../data/Obesity+Prevalence+by+ZIP+Code+and+Age+Group,+Males.xlsx",
"male", 1)
male_18_34 = read_and_format("../../data/Obesity+Prevalence+by+ZIP+Code+and+Age+Group,+Males.xlsx",
"male", 2)
## initialize a container to keep the sum
my_sum = 0
## i is an index variable which will take on the values from 4 to 10 in the loop
## We print the values of i and my_sum at each stage so you can see how they change as the loop executes
## cat() concatenates objects into a single string and here writes to the console
## The symbol \n refers to a carriage return (new line)
for ( i in 4:10 )
{
cat("i =", i, "\n")
my_sum = my_sum + i
cat("my_sum =", my_sum, "\n")
}
## Show the final value
my_sum
my_sum = 0
for ( i in 1:5 )
{
for ( j in 1:3 )
{
my_sum = my_sum + i*j
cat("i =", i, ", j =", j, ", add", i*j, "and get", my_sum, "\n")
}
}
my_sum
read_obesity = function()
{
## Create an empty container to hold the data as we read it in
obesity = tibble()
## vector of the two sexes
sexes = c("female","male")
## the next several lines create a vector of length 2
## which has the two file names, #1 for female, #2 for male
## Use str_c() to combine the parts of the strings into a vector of strings part-wise
files = str_c("../../data/",
"Obesity+Prevalence+by+ZIP+Code+and+Age+Group,",
c("+Females", "+Males"),
".xlsx")
for ( s in 1:2 ) ## s is an index into files and sexes
{
for ( i in 1:5 ) ## i+3 is the sheet and i is an index into age
{
## temporary object with a data from a single sheet
temp = read_and_format(files[s],sexes[s],i)
## add the data we just read in to the combined data set
obesity = bind_rows(obesity,temp)
}
}
## change zip from numerical to character
obesity = obesity %>%
mutate(zip = as.character(zip))
## reorder the columns
obesity = obesity %>%
select(zip, sex, age, everything())
return( obesity )
}
files
obesity = tibble()
## vector of the two sexes
sexes = c("female","male")
## the next several lines create a vector of length 2
## which has the two file names, #1 for female, #2 for male
## Use str_c() to combine the parts of the strings into a vector of strings part-wise
files = str_c("../../data/",
"Obesity+Prevalence+by+ZIP+Code+and+Age+Group,",
c("+Females", "+Males"),
".xlsx")
files
files[1]
files[2]
