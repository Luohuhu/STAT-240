knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(scales)
library(lubridate)
library(XML) #For reading in HTML files
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("../../scripts/viridis.R")
## Input:  x = HTML file
## Output: nicely formatted tibble
read_airport =  function(x)
{
airport_column_names = c("airport",
"terminal",
"date",
"hour",
"us_avg_wait",
"us_max_wait",
"non_us_avg_wait",
"non_us_max_wait",
"all_avg_wait",
"all_max_wait",
"all_n_0_15",
"all_n_16_30",
"all_n_31_45",
"all_n_46_60",
"all_n_61_90",
"all_n_91_120",
"all_n_120_plus",
"all_excluded",
"all_total",
"all_flights",
"all_booths")
airport = readHTMLTable(x)$`NULL` %>%
slice(-(1:3))
names(airport) = airport_column_names
airport = airport %>%
as_tibble() %>%
mutate(across(ends_with("wait") | starts_with("all"), as.numeric)) %>%
mutate(across(where(is.factor),as.character)) %>%
mutate(date = mdy(date))
return( airport )
}
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(scales)
library(lubridate)
library(XML) #For reading in HTML files
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("../../scripts/viridis.R")
## Input:  x = HTML file
## Output: nicely formatted tibble
read_airport =  function(x)
{
airport_column_names = c("airport",
"terminal",
"date",
"hour",
"us_avg_wait",
"us_max_wait",
"non_us_avg_wait",
"non_us_max_wait",
"all_avg_wait",
"all_max_wait",
"all_n_0_15",
"all_n_16_30",
"all_n_31_45",
"all_n_46_60",
"all_n_61_90",
"all_n_91_120",
"all_n_120_plus",
"all_excluded",
"all_total",
"all_flights",
"all_booths")
airport = readHTMLTable(x)$`NULL` %>%
slice(-(1:3))
names(airport) = airport_column_names
airport = airport %>%
as_tibble() %>%
mutate(across(ends_with("wait") | starts_with("all"), as.numeric)) %>%
mutate(across(where(is.factor),as.character)) %>%
mutate(date = mdy(date))
return( airport )
}
## read the individual data sets
den = read_airport("../../data/DEN-2018.html")
jfk = read_airport("../../data/JFK-2018.html")
lax = read_airport("../../data/LAX-2018.html")
msp = read_airport("../../data/MSP-2018.html")
ord = read_airport("../../data/ORD-2018.html")
sfo = read_airport("../../data/SFO-2018.html")
## combine into one data set
awt = bind_rows(den, jfk, lax, msp, ord, sfo)
## remove the individual ones
rm(den, jfk, lax, msp, ord, sfo)
count_na = function(x)
{
return ( sum(is.na(x) ) )
}
awt %>%
summarize(across(everything(), count_na)) %>%
print(width = Inf)
# There are no missing values for any variables.
?distinct
## Create a mini temporary data set with all dates in 2018
temp = tibble(
date = seq(ymd("2018-01-01"), ymd("2018-12-31"), 1)
)
## Find distinct dates by airport, then do a full merge and filter those with missing terminals
awt %>%
select(airport, date) %>%
distinct() %>%
full_join(temp) %>%
filter(is.na(airport))
## there is not airport name in temp
## Create a mini temporary data set with all dates in 2018
temp = tibble(
date = seq(ymd("2018-01-01"), ymd("2018-12-31"), 1)
)
## Find distinct dates by airport, then do a full merge and filter those with missing terminals
awt %>%
select(airport, date) %>%
distinct() %>%
full_join(temp) #%>%
#filter(is.na(airport))
## there is not airport name in temp
## Create a mini temporary data set with all dates in 2018
temp = tibble(
date = seq(ymd("2018-01-01"), ymd("2018-12-31"), 1)
)
## Find distinct dates by airport, then do a full merge and filter those with missing terminals
awt %>%
select(airport, date) %>%
distinct() %>%
full_join(temp) %>%
filter(is.na(airport))
## there is not airport name in temp
